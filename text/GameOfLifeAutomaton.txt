package automata;
import sample.model.AbstractAutomaton;
import sample.model.Callable;

public class Automata extends AbstractAutomaton {
private final static int rows = 30;
private final static int columns = 50;
private static int numberOfStates = 2;
private final static boolean isTorus = false;

    public Automata() {
        super(rows, columns, numberOfStates, isTorus);
    }

    @Override
    public Cell transform(Cell cell, Cell[] neighbors) {
        int numberOfNeighbors = 0;
        for (Cell neighbor : neighbors) {
            if (neighbor.getState() == 1) {
                numberOfNeighbors++;
            }
        }
        if (cell.getState() == 0) {
            if (numberOfNeighbors == 3) {
                return new Cell(1);
            } else {
                return new Cell(cell);
            }
        } else {
            if (numberOfNeighbors < 2 || numberOfNeighbors > 3) {
                return new Cell(0);
            } else {
                return new Cell(cell);
            }
        }
    }

    @Callable
    public void setGlider(int i, int j) {
        setState(i, j, 1);
        setState(i + 1, j, 1);
        setState(i + 2, j, 1);
    }

   @Callable
    public void setOscillator(int i, int j) {
     setState(i, j,1);
     setState(i + 1, j + 1,1);
     setState(i + 2, j - 1,1);
     setState(i + 2, j,1);
     setState(i + 2, j + 1,1);
     }

     @Callable
      public void setCross(int i, int j){
       setState(i, j,1);
       setState(i, j - 1, 1);
       setState(i, j + 1, 1);
       setState(i - 1, j, 1);
       setState(i + 1, j, 1);
      }
}
